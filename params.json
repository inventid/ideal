{"name":"Ideal","tagline":"Ruby 2.1.2 compatible iDealv3 payment gateway","body":"[![inventid logo](https://cdn.inventid.nl/assets/logo-horizontally-ba8ae38ab1f53863fa4e99b977eaa1c7.png)](http://opensource.inventid.nl)\r\n\r\n[![Gem Version](https://badge.fury.io/rb/ideal-payment.svg)](http://badge.fury.io/rb/ideal-payment)\r\n\r\n# Ideal\r\n| Branch | Build status | Code coverage |\r\n|---|---|---|\r\n| Master |[![Build Status](https://travis-ci.org/inventid/ideal.svg?branch=master)](https://travis-ci.org/inventid/ideal)|[![Coverage Status](http://img.shields.io/coveralls/inventid/ideal/master.svg)](https://coveralls.io/r/inventid/ideal?branch=master)|\r\n| Develop |[![Build Status](https://travis-ci.org/inventid/ideal.svg?branch=develop)](https://travis-ci.org/inventid/ideal)|[![Coverage Status](http://img.shields.io/coveralls/inventid/ideal/develop.svg)](https://coveralls.io/r/inventid/ideal?branch=develop)|\r\n\r\n## What is it?\r\n\r\nIdeal is a simple Ruby 2.1 compliant gateway to contact any banks using the Dutch iDeal protocol.\r\nSince there was no decent one available, we decided to develop our own.\r\nAnd now you can use it too!\r\n\r\n## How to use it?\r\n\r\nUsing it is quite simple, you can simply clone the code and then require it.\r\nAlternatively you may use the gem `ideal-payment` (https://rubygems.org/gems/ideal-payment).\r\n\r\nWhen using in live, also set `Ideal::Gateway.environment = :live`\r\n\r\n### Preparing certificates\r\n\r\niDeal requires client certificates.\r\nYou have to generate these yourself (or buy one from a Certificate Authority, but that's just wasting money in this case).\r\nAdditionally you need the certificate from your acquirer, which is supplied through their dashboard.\r\n\r\nThe following code generates the certificate and key.\r\nReplace _PASSWORD_ with your actual password.\r\n\r\n````bash\r\nopenssl genrsa -aes128 -out private.key -passout pass:PASSWORD 2048\r\nopenssl req -x509 -sha256 -new -key private.key -passin pass:PASSWORD -days 1825 -out certificate.cer\r\n````\r\n\r\n### Using a fixture\r\n\r\nFixtures are a great way not to have all these constants in your code, a server administrator may even override them with tools as Puppet.\r\n\r\nThe fixture is equal to the one in the test.\r\n\r\n````yaml\r\ndefault:\r\n  acquirer: rabobank\r\n  merchant_id: '002054205'\r\n  passphrase: wachtwoord\r\n  private_key_file: ../certs/bestandsnaam.key\r\n  private_certificate_file: ../certs/bestandsnaam.cer\r\n  ideal_certificate_file: ../certs/ideal.cer\r\n````\r\n\r\nwhich can be later loaded with the following code\r\n\r\n````ruby\r\nfile = File.join(File.dirname(__FILE__), 'fixtures.yml')\r\nfixtures ||= YAML.load(File.read(file))\r\nfixture = fixtures[key] || raise(StandardError, \"No fixture data was found for key '#{key}'\")\r\nif passphrase = fixture.delete('passphrase')\r\n  Ideal::Gateway.passphrase = passphrase\r\nend\r\nfixture.each { |key, value| Ideal::Gateway.send(\"#{key}=\", value) }\r\n````\r\n\r\n### Not using a fixture\r\n\r\nWell, also an option.\r\nCodewise it might even be a bit cleaner :wink: although deployment is harder\r\n\r\n````ruby\r\n# Other banks preloaded are :abnamro and :rabobank\r\nIdeal::Gateway.acquirer = :ing\r\nIdeal::Gateway.merchant_id = '00123456789'\r\n\r\n# Maybe you'd like another location\r\nideal_directory = Rails.root + 'config/ideal'\r\nIdeal::Gateway.passphrase = 'the_passphrase'\r\nIdeal::Gateway.private_key_file         = ideal_directory + 'private_key.pem'\r\nIdeal::Gateway.private_certificate_file = ideal_directory + 'private_certificate.cer'\r\nIdeal::Gateway.ideal_certificate_file   = ideal_directory + 'ideal.cer'\r\n````\r\n\r\n### Getting a list of issuers\r\n\r\nThis does the explicit call to your acquirer.\r\nSince the list of issuers hardly ever changes, you could better (performance-wise) cache the result for 48 hours.\r\n\r\n````ruby\r\nIdeal::Gateway.new.issuers.list\r\n````\r\n\r\n### Requesting a payment\r\n\r\nFor this we need to send a Transaction Request to our acquirer with the following code\r\n\r\n````ruby\r\nattributes = {\r\n  # The customer has 30 minutes to complete the iDeal transaction (ISO 8601)\r\n  :expiration_period => \"PT30M\",\r\n  :issuer_id         => issuer_id,\r\n  :return_url        => return_url,\r\n  :order_id          => '14',\r\n  :description       => 'Probably awesomeness',\r\n  :entrance_code     => 'secretCode'\r\n}\r\nresponse = ideal.setup_purchase(5.00 , ideal_attributes)\r\nif response.success?\r\n  # Save the data, then redirect\r\n  redirect_to response.service_url\r\nelse\r\n  # Log something\r\nend\r\n````\r\n\r\n### Requesting the payment status\r\n\r\nThe merchant has the obligation to request a final status once the timeout has expired.\r\n\r\n````ruby\r\nstatus = ideal.capture(transaction_id)\r\nif status.success?\r\n  # Save the data as paid\r\nend\r\n````\r\n\r\n## How to suggest improvements?\r\n\r\nWe are still actively developing Ideal for our internal use, but we would already love to hear your feedback. In case you have some great ideas, you may just [open an issue](https://github.com/inventid/ideal/issues/new). Be sure to check beforehand whether the same issue does not already exist.\r\n\r\n## How can I contribute?\r\n\r\nWe feel contributions from the community are extremely worthwhile. If you use Ideal in production and make some modification, please share it back to the community. You can simply [fork the repository](https://github.com/inventid/ideal/fork), commit your changes to your code and create a pull request back to this repository.\r\n\r\nIf there are any issues related to your changes, be sure to reference to those. Additionally we use the `develop` branch, so create a pull request to that branch and not to `master`.\r\n\r\nAdditionally we always use [vagrant](http://www.vagrantup.com) for our development. To do the same, you can do the following:\r\n\r\n1. Make sure to have [vagrant](http://www.vagrantup.com) installed.\r\n1. Clone the repository\r\n1. Open a terminal / shell script and nagivate to the place where you cloned the repository\r\n1. Simply enter `vagrant up`\r\n1. Provisioning takes around 5 minutes on my PC. If you want it to be faster you can use the `userConfig.json` file in the root and override the specific settings for memory and CPU.\r\n1. The Vagrant machine provisions and you can easily work with us. Enter `vagrant ssh` to get shell access to the machine. In case you are done with it, simply enter `vagrant destroy`. You won't lose any changes to your git repository when this happens.\r\n\r\n## Collaborators\r\n\r\nWe would like to thank the developers which contributed to Ideal, both big and small.\r\n\r\n- [rogierslag](https://github.com/rogierslag) (Lead developer of Ideal @ [inventid](https://www.inventid.nl))\r\n- [joostverdoorn](https://github.com/joostverdoorn) (Developer of Ideal @ [inventid](https://www.inventid.nl))\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}